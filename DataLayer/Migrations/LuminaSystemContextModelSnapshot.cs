// <auto-generated />
using System;
using DataLayer.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(LuminaSystemContext))]
    partial class LuminaSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataLayer.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<string>("AccessToken")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("AuthProvider")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("Create_at")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("ProviderUserId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RefreshToken")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("TokenExpiresAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("Update_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("AccountId")
                        .HasName("PK__Accounts__349DA5A66E07EEBE");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "AuthProvider", "ProviderUserId" }, "UQ_Accounts_AuthProvider_ProviderUserId")
                        .IsUnique()
                        .HasFilter("([AuthProvider] IS NOT NULL AND [ProviderUserId] IS NOT NULL)");

                    b.HasIndex(new[] { "Username" }, "UQ__Accounts__536C85E4C923B0BE")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DataLayer.Models.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ArticleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool?>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Status")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("ArticleId")
                        .HasName("PK__Articles__9C6270C88BD5B813");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("DataLayer.Models.ArticleCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedByUserID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.HasKey("CategoryId")
                        .HasName("PK__ArticleC__19093A2B95CED098");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("ArticleCategories");
                });

            modelBuilder.Entity("DataLayer.Models.ArticleSection", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SectionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionId"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("ArticleID");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<string>("SectionContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("SectionId")
                        .HasName("PK__ArticleS__80EF0892A9E4A151");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticleSections");
                });

            modelBuilder.Entity("DataLayer.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("StartDate")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int");

                    b.HasKey("EventId")
                        .HasName("PK__Events__7944C8108B79DD0A");

                    b.HasIndex("CreateBy");

                    b.HasIndex("UpdateBy");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("DataLayer.Models.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExamSetKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExamType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int");

                    b.HasKey("ExamId")
                        .HasName("PK__Exams__297521C791F6DF8D");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdateBy");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("DataLayer.Models.ExamAttempt", b =>
                {
                    b.Property<int>("AttemptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AttemptID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttemptId"));

                    b.Property<DateTime?>("EndTime")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<int>("ExamId")
                        .HasColumnType("int")
                        .HasColumnName("ExamID");

                    b.Property<int?>("ListeningScore")
                        .HasColumnType("int");

                    b.Property<int?>("ReadingScore")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<int?>("SpeakingScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int?>("WritingScore")
                        .HasColumnType("int");

                    b.HasKey("AttemptId")
                        .HasName("PK__ExamAtte__891A68864E80FEA1");

                    b.HasIndex("ExamId");

                    b.HasIndex("UserId");

                    b.ToTable("ExamAttempts");
                });

            modelBuilder.Entity("DataLayer.Models.ExamPart", b =>
                {
                    b.Property<int>("PartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartId"));

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("MaxQuestions")
                        .HasColumnType("int");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<string>("PartCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("PartId")
                        .HasName("PK__ExamPart__7C3F0D501ED38AB6");

                    b.HasIndex("ExamId");

                    b.ToTable("ExamParts");
                });

            modelBuilder.Entity("DataLayer.Models.Leaderboard", b =>
                {
                    b.Property<int>("LeaderboardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LeaderboardID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeaderboardId"));

                    b.Property<DateTime?>("CreateAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime?>("EndDate")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("SeasonName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.HasKey("LeaderboardId")
                        .HasName("PK__Leaderbo__B358A1E60B6C8F5C");

                    b.ToTable("Leaderboard", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__20CF2E12AAE7DD1E");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DataLayer.Models.Option", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("OptionId")
                        .HasName("PK__Options__92C7A1FF9DEA13B7");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("DataLayer.Models.Package", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PackageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageId"));

                    b.Property<int?>("DurationInDays")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(12, 2)");

                    b.HasKey("PackageId")
                        .HasName("PK__Packages__322035ECD9DF94F4");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("DataLayer.Models.PasswordResetToken", b =>
                {
                    b.Property<int>("PasswordResetTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PasswordResetTokenID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PasswordResetTokenId"));

                    b.Property<string>("CodeHash")
                        .IsRequired()
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<DateTime>("ExpiresAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime?>("UsedAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PasswordResetTokenId")
                        .HasName("PK_PasswordResetTokens");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordResetTokens", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int>("PackageId")
                        .HasColumnType("int")
                        .HasColumnName("PackageID");

                    b.Property<string>("PaymentGatewayTransactionId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("PaymentGatewayTransactionID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payments__9B556A58D393F47D");

                    b.HasIndex("PackageId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "PaymentGatewayTransactionId" }, "UQ__Payments__0058A86E2C7EFF16")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DataLayer.Models.Prompt", b =>
                {
                    b.Property<int>("PromptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromptId"));

                    b.Property<string>("ContentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceAudioUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PromptId");

                    b.ToTable("Prompts");
                });

            modelBuilder.Entity("DataLayer.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<int?>("PromptId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionExplain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("int");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SampleAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScoreWeight")
                        .HasColumnType("int");

                    b.Property<string>("StemText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("QuestionId")
                        .HasName("PK__Question__0DC06FACE795341E");

                    b.HasIndex("PartId");

                    b.HasIndex("PromptId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("DataLayer.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReportID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReplyAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<int?>("ReplyBy")
                        .HasColumnType("int");

                    b.Property<string>("ReplyContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<int>("SendBy")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ReportId")
                        .HasName("PK__Reports__D5BD48E51D27B3D5");

                    b.HasIndex("SendBy");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("DataLayer.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__8AFACE1AA4681B10");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DataLayer.Models.SectionCompletion", b =>
                {
                    b.Property<int>("CompletionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompletionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompletionId"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<int>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("SectionID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CompletionId")
                        .HasName("PK__SectionC__77FA70AF88803DC4");

                    b.HasIndex("SectionId");

                    b.HasIndex("UserId");

                    b.ToTable("SectionCompletions");
                });

            modelBuilder.Entity("DataLayer.Models.Slide", b =>
                {
                    b.Property<int>("SlideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlideId"));

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SlideName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SlideUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int");

                    b.HasKey("SlideId")
                        .HasName("PK__Slides__9E7CB650BEF67F4A");

                    b.HasIndex("CreateBy");

                    b.HasIndex("UpdateBy");

                    b.ToTable("Slides");
                });

            modelBuilder.Entity("DataLayer.Models.SpeakingResult", b =>
                {
                    b.Property<int>("SpeakingResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpeakingResultId"));

                    b.Property<float?>("AccuracyScore")
                        .HasColumnType("real");

                    b.Property<float?>("CompletenessScore")
                        .HasColumnType("real");

                    b.Property<float?>("ContentScore")
                        .HasColumnType("real");

                    b.Property<float?>("FluencyScore")
                        .HasColumnType("real");

                    b.Property<float?>("GrammarScore")
                        .HasColumnType("real");

                    b.Property<float?>("PronunciationScore")
                        .HasColumnType("real");

                    b.Property<int>("UserAnswerId")
                        .HasColumnType("int");

                    b.Property<float?>("VocabularyScore")
                        .HasColumnType("real");

                    b.HasKey("SpeakingResultId");

                    b.HasIndex("UserAnswerId")
                        .IsUnique();

                    b.ToTable("SpeakingResults");
                });

            modelBuilder.Entity("DataLayer.Models.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubscriptionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"));

                    b.Property<DateTime?>("EndTime")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<int>("PackageId")
                        .HasColumnType("int")
                        .HasColumnName("PackageID");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    b.Property<DateTime?>("StartTime")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("SubscriptionId")
                        .HasName("PK__Subscrip__9A2B24BDA2D67BCE");

                    b.HasIndex("PackageId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("DataLayer.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CurrentStreak")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastPracticeDate")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCACF48D0559");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D105346CC2643F")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataLayer.Models.UserAnswer", b =>
                {
                    b.Property<int>("UserAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserAnswerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserAnswerId"));

                    b.Property<string>("AnswerContent")
                        .HasColumnType("text");

                    b.Property<int>("AttemptId")
                        .HasColumnType("int")
                        .HasColumnName("AttemptID");

                    b.Property<string>("AudioUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AudioURL");

                    b.Property<string>("FeedbackAi")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FeedbackAI");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit")
                        .HasColumnName("IsCorrect");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    b.Property<float?>("Score")
                        .HasColumnType("real")
                        .HasColumnName("Score");

                    b.Property<int?>("SelectedOptionId")
                        .HasColumnType("int")
                        .HasColumnName("SelectedOptionID");

                    b.HasKey("UserAnswerId")
                        .HasName("PK__UserAnsw__47CE235F4AA17153");

                    b.HasIndex("AttemptId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedOptionId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("DataLayer.Models.UserArticleProgress", b =>
                {
                    b.Property<int>("ProgressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProgressID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgressId"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("ArticleID");

                    b.Property<DateTime?>("CompletedAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("LastAccessedAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<int?>("ProgressPercent")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ProgressId")
                        .HasName("PK__UserArti__BAE29C85A832D5F7");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserArticleProgress", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.UserLeaderboard", b =>
                {
                    b.Property<int>("UserLeaderboardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserLeaderboardID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserLeaderboardId"));

                    b.Property<int>("LeaderboardId")
                        .HasColumnType("int")
                        .HasColumnName("LeaderboardID");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("UserLeaderboardId")
                        .HasName("PK__UserLead__F2E24551691C1D90");

                    b.HasIndex("LeaderboardId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLeaderboard", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.UserNote", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NoteID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoteId"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("ArticleID");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("NoteContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("SectionID");

                    b.Property<DateTime?>("UpdateAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("NoteId")
                        .HasName("PK__UserNote__EACE357FD9109DCF");

                    b.HasIndex("ArticleId");

                    b.HasIndex("SectionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotes");
                });

            modelBuilder.Entity("DataLayer.Models.UserNotification", b =>
                {
                    b.Property<int>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UniqueID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UniqueId"));

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UniqueId")
                        .HasName("PK__UserNoti__A2A2BAAAD8BD5A4B");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("DataLayer.Models.UserSpacedRepetition", b =>
                {
                    b.Property<int>("UserSpacedRepetitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserSpacedRepetitionId"));

                    b.Property<int?>("Intervals")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastReviewedAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime?>("NextReviewAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<int?>("ReviewCount")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VocabularyListId")
                        .HasColumnType("int");

                    b.HasKey("UserSpacedRepetitionId")
                        .HasName("PK__UserSpac__F141C818F2E5BE1C");

                    b.HasIndex("UserId");

                    b.HasIndex("VocabularyListId");

                    b.ToTable("UserSpacedRepetition", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.Vocabulary", b =>
                {
                    b.Property<int>("VocabularyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VocabularyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VocabularyId"));

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Example")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TypeOfWord")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("VocabularyListId")
                        .HasColumnType("int");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("VocabularyId")
                        .HasName("PK__Vocabula__9274069F7C141637");

                    b.HasIndex("VocabularyListId");

                    b.ToTable("Vocabularies");
                });

            modelBuilder.Entity("DataLayer.Models.VocabularyList", b =>
                {
                    b.Property<int>("VocabularyListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VocabularyListId"));

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<int>("MakeBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.HasKey("VocabularyListId")
                        .HasName("PK__Vocabula__C2D6E440F67079D4");

                    b.HasIndex("MakeBy");

                    b.ToTable("VocabularyList", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.Account", b =>
                {
                    b.HasOne("DataLayer.Models.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Accounts_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Models.Article", b =>
                {
                    b.HasOne("DataLayer.Models.ArticleCategory", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Articles_ArticleCategories");

                    b.HasOne("DataLayer.Models.User", "CreatedByNavigation")
                        .WithMany("ArticleCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Articles_CreatedBy");

                    b.HasOne("DataLayer.Models.User", "UpdatedByNavigation")
                        .WithMany("ArticleUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_Articles_UpdatedBy");

                    b.Navigation("Category");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("DataLayer.Models.ArticleCategory", b =>
                {
                    b.HasOne("DataLayer.Models.User", "CreatedByUser")
                        .WithMany("ArticleCategories")
                        .HasForeignKey("CreatedByUserId")
                        .HasConstraintName("FK_ArticleCategories_Users");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("DataLayer.Models.ArticleSection", b =>
                {
                    b.HasOne("DataLayer.Models.Article", "Article")
                        .WithMany("ArticleSections")
                        .HasForeignKey("ArticleId")
                        .IsRequired()
                        .HasConstraintName("FK_ArticleSections_Articles");

                    b.Navigation("Article");
                });

            modelBuilder.Entity("DataLayer.Models.Event", b =>
                {
                    b.HasOne("DataLayer.Models.User", "CreateByNavigation")
                        .WithMany("EventCreateByNavigations")
                        .HasForeignKey("CreateBy")
                        .IsRequired()
                        .HasConstraintName("FK_Events_Users_Create");

                    b.HasOne("DataLayer.Models.User", "UpdateByNavigation")
                        .WithMany("EventUpdateByNavigations")
                        .HasForeignKey("UpdateBy")
                        .HasConstraintName("FK_Events_Users_Update");

                    b.Navigation("CreateByNavigation");

                    b.Navigation("UpdateByNavigation");
                });

            modelBuilder.Entity("DataLayer.Models.Exam", b =>
                {
                    b.HasOne("DataLayer.Models.User", "CreatedByNavigation")
                        .WithMany("ExamCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Exams_CreatedBy");

                    b.HasOne("DataLayer.Models.User", "UpdateByNavigation")
                        .WithMany("ExamUpdateByNavigations")
                        .HasForeignKey("UpdateBy")
                        .HasConstraintName("FK_Exams_UpdatedBy");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdateByNavigation");
                });

            modelBuilder.Entity("DataLayer.Models.ExamAttempt", b =>
                {
                    b.HasOne("DataLayer.Models.Exam", "Exam")
                        .WithMany("ExamAttempts")
                        .HasForeignKey("ExamId")
                        .IsRequired()
                        .HasConstraintName("FK_ExamAttempts_Exam");

                    b.HasOne("DataLayer.Models.User", "User")
                        .WithMany("ExamAttempts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ExamAttempts_Users");

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Models.ExamPart", b =>
                {
                    b.HasOne("DataLayer.Models.Exam", "Exam")
                        .WithMany("ExamParts")
                        .HasForeignKey("ExamId")
                        .IsRequired()
                        .HasConstraintName("FK_ExamParts_Exams");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("DataLayer.Models.Option", b =>
                {
                    b.HasOne("DataLayer.Models.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_Option_Questions");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DataLayer.Models.PasswordResetToken", b =>
                {
                    b.HasOne("DataLayer.Models.User", "User")
                        .WithMany("PasswordResetTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PasswordResetTokens_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Models.Payment", b =>
                {
                    b.HasOne("DataLayer.Models.Package", "Package")
                        .WithMany("Payments")
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("FK_Payments_Packages");

                    b.HasOne("DataLayer.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Payments_Users");

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Models.Question", b =>
                {
                    b.HasOne("DataLayer.Models.ExamPart", "Part")
                        .WithMany("Questions")
                        .HasForeignKey("PartId")
                        .IsRequired()
                        .HasConstraintName("FK_Questions_ExamParts");

                    b.HasOne("DataLayer.Models.Prompt", "Prompt")
                        .WithMany("Questions")
                        .HasForeignKey("PromptId")
                        .HasConstraintName("FK_Questions_Prompts");

                    b.Navigation("Part");

                    b.Navigation("Prompt");
                });

            modelBuilder.Entity("DataLayer.Models.Report", b =>
                {
                    b.HasOne("DataLayer.Models.User", "SendByNavigation")
                        .WithMany("Reports")
                        .HasForeignKey("SendBy")
                        .IsRequired()
                        .HasConstraintName("FK_Reports_ReplyBy");

                    b.Navigation("SendByNavigation");
                });

            modelBuilder.Entity("DataLayer.Models.SectionCompletion", b =>
                {
                    b.HasOne("DataLayer.Models.ArticleSection", "Section")
                        .WithMany("SectionCompletions")
                        .HasForeignKey("SectionId")
                        .IsRequired()
                        .HasConstraintName("FK_SectionCompletions_ArticleSections");

                    b.HasOne("DataLayer.Models.User", "User")
                        .WithMany("SectionCompletions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_SectionCompletions_Users");

                    b.Navigation("Section");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Models.Slide", b =>
                {
                    b.HasOne("DataLayer.Models.User", "CreateByNavigation")
                        .WithMany("SlideCreateByNavigations")
                        .HasForeignKey("CreateBy")
                        .IsRequired()
                        .HasConstraintName("FK_Slides_Users_Create");

                    b.HasOne("DataLayer.Models.User", "UpdateByNavigation")
                        .WithMany("SlideUpdateByNavigations")
                        .HasForeignKey("UpdateBy")
                        .HasConstraintName("FK_Slides_Users_Update");

                    b.Navigation("CreateByNavigation");

                    b.Navigation("UpdateByNavigation");
                });

            modelBuilder.Entity("DataLayer.Models.SpeakingResult", b =>
                {
                    b.HasOne("DataLayer.Models.UserAnswer", "UserAnswer")
                        .WithOne("SpeakingResult")
                        .HasForeignKey("DataLayer.Models.SpeakingResult", "UserAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAnswer");
                });

            modelBuilder.Entity("DataLayer.Models.Subscription", b =>
                {
                    b.HasOne("DataLayer.Models.Package", "Package")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("FK_Subscriptions_Packages");

                    b.HasOne("DataLayer.Models.Payment", "Payment")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PaymentId")
                        .IsRequired()
                        .HasConstraintName("FK_Subscriptions_Payments");

                    b.HasOne("DataLayer.Models.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Subscriptions_Users");

                    b.Navigation("Package");

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Models.User", b =>
                {
                    b.HasOne("DataLayer.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Roles");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataLayer.Models.UserAnswer", b =>
                {
                    b.HasOne("DataLayer.Models.ExamAttempt", "Attempt")
                        .WithMany("UserAnswers")
                        .HasForeignKey("AttemptId")
                        .IsRequired()
                        .HasConstraintName("FK_UserAnswers_ExamAttempts");

                    b.HasOne("DataLayer.Models.Question", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_UserAnswers_Questions");

                    b.HasOne("DataLayer.Models.Option", "SelectedOption")
                        .WithMany("UserAnswers")
                        .HasForeignKey("SelectedOptionId")
                        .HasConstraintName("FK_UserAnswers_Options");

                    b.Navigation("Attempt");

                    b.Navigation("Question");

                    b.Navigation("SelectedOption");
                });

            modelBuilder.Entity("DataLayer.Models.UserArticleProgress", b =>
                {
                    b.HasOne("DataLayer.Models.Article", "Article")
                        .WithMany("UserArticleProgresses")
                        .HasForeignKey("ArticleId")
                        .IsRequired()
                        .HasConstraintName("FK_UserArticleProgress_Articles");

                    b.HasOne("DataLayer.Models.User", "User")
                        .WithMany("UserArticleProgresses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserArticleProgress_Users");

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Models.UserLeaderboard", b =>
                {
                    b.HasOne("DataLayer.Models.Leaderboard", "Leaderboard")
                        .WithMany("UserLeaderboards")
                        .HasForeignKey("LeaderboardId")
                        .IsRequired()
                        .HasConstraintName("FK_UserLeaderboard_Leaderboard");

                    b.HasOne("DataLayer.Models.User", "User")
                        .WithMany("UserLeaderboards")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserLeaderboard_Users");

                    b.Navigation("Leaderboard");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Models.UserNote", b =>
                {
                    b.HasOne("DataLayer.Models.Article", "Article")
                        .WithMany("UserNotes")
                        .HasForeignKey("ArticleId")
                        .IsRequired()
                        .HasConstraintName("FK_UserNotes_Articles");

                    b.HasOne("DataLayer.Models.ArticleSection", "Section")
                        .WithMany("UserNotes")
                        .HasForeignKey("SectionId")
                        .IsRequired()
                        .HasConstraintName("FK_UserNotes_ArticleSections");

                    b.HasOne("DataLayer.Models.User", "User")
                        .WithMany("UserNotes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserNotes_Users");

                    b.Navigation("Article");

                    b.Navigation("Section");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Models.UserNotification", b =>
                {
                    b.HasOne("DataLayer.Models.Notification", "Notification")
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationId")
                        .HasConstraintName("FK_UserNotifications_Notifications");

                    b.HasOne("DataLayer.Models.User", "User")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserNotifications_Users");

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Models.UserSpacedRepetition", b =>
                {
                    b.HasOne("DataLayer.Models.User", "User")
                        .WithMany("UserSpacedRepetitions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserSpacedRepetition_Users");

                    b.HasOne("DataLayer.Models.VocabularyList", "VocabularyList")
                        .WithMany("UserSpacedRepetitions")
                        .HasForeignKey("VocabularyListId")
                        .IsRequired()
                        .HasConstraintName("FK_UserSpacedRepetition_VocabularyList");

                    b.Navigation("User");

                    b.Navigation("VocabularyList");
                });

            modelBuilder.Entity("DataLayer.Models.Vocabulary", b =>
                {
                    b.HasOne("DataLayer.Models.VocabularyList", "VocabularyList")
                        .WithMany("Vocabularies")
                        .HasForeignKey("VocabularyListId")
                        .IsRequired()
                        .HasConstraintName("FK_Vocabularies_VocabularyList");

                    b.Navigation("VocabularyList");
                });

            modelBuilder.Entity("DataLayer.Models.VocabularyList", b =>
                {
                    b.HasOne("DataLayer.Models.User", "MakeByNavigation")
                        .WithMany("VocabularyLists")
                        .HasForeignKey("MakeBy")
                        .IsRequired()
                        .HasConstraintName("FK_VocabularyList_Users");

                    b.Navigation("MakeByNavigation");
                });

            modelBuilder.Entity("DataLayer.Models.Article", b =>
                {
                    b.Navigation("ArticleSections");

                    b.Navigation("UserArticleProgresses");

                    b.Navigation("UserNotes");
                });

            modelBuilder.Entity("DataLayer.Models.ArticleCategory", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("DataLayer.Models.ArticleSection", b =>
                {
                    b.Navigation("SectionCompletions");

                    b.Navigation("UserNotes");
                });

            modelBuilder.Entity("DataLayer.Models.Exam", b =>
                {
                    b.Navigation("ExamAttempts");

                    b.Navigation("ExamParts");
                });

            modelBuilder.Entity("DataLayer.Models.ExamAttempt", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("DataLayer.Models.ExamPart", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("DataLayer.Models.Leaderboard", b =>
                {
                    b.Navigation("UserLeaderboards");
                });

            modelBuilder.Entity("DataLayer.Models.Notification", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("DataLayer.Models.Option", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("DataLayer.Models.Package", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("DataLayer.Models.Payment", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("DataLayer.Models.Prompt", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("DataLayer.Models.Question", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("DataLayer.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataLayer.Models.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("ArticleCategories");

                    b.Navigation("ArticleCreatedByNavigations");

                    b.Navigation("ArticleUpdatedByNavigations");

                    b.Navigation("EventCreateByNavigations");

                    b.Navigation("EventUpdateByNavigations");

                    b.Navigation("ExamAttempts");

                    b.Navigation("ExamCreatedByNavigations");

                    b.Navigation("ExamUpdateByNavigations");

                    b.Navigation("PasswordResetTokens");

                    b.Navigation("Payments");

                    b.Navigation("Reports");

                    b.Navigation("SectionCompletions");

                    b.Navigation("SlideCreateByNavigations");

                    b.Navigation("SlideUpdateByNavigations");

                    b.Navigation("Subscriptions");

                    b.Navigation("UserArticleProgresses");

                    b.Navigation("UserLeaderboards");

                    b.Navigation("UserNotes");

                    b.Navigation("UserNotifications");

                    b.Navigation("UserSpacedRepetitions");

                    b.Navigation("VocabularyLists");
                });

            modelBuilder.Entity("DataLayer.Models.UserAnswer", b =>
                {
                    b.Navigation("SpeakingResult");
                });

            modelBuilder.Entity("DataLayer.Models.VocabularyList", b =>
                {
                    b.Navigation("UserSpacedRepetitions");

                    b.Navigation("Vocabularies");
                });
#pragma warning restore 612, 618
        }
    }
}
